<?php defined('SYSPATH') OR die('No direct access allowed.');
/**
	
 * 3 types of data output formats:
		1. normal standalone output. if no javascript, functions as normal,
				outputs complete views.
		
		2. ajax standalone. updates via ajax, only outputs data view.
		
		3. ajax json. called externally outputs raw json to be formatted
				at other end.
 */
class Home_Controller extends Template_Controller {


	// Set the name of the template to use
	public $template = 'template';

	public function index()
	{
	
		$site = ORM::factory('site', $this->site_id);
				
		if($_POST)
			$submit_view = self::submit_handler();
		else
		{
			$submit_view = new View('submit_review_form');
			$submit_view->values = array(
				'body'					=>'',
				'display_name'	=> '',
				'email'					=> ''
			);
			$submit_view->site = $site;
		}
		
		$content = new View('wrapper');
		$content->site = $site;
		$content->reviews_list = $this->reviews_list();
		$content->submit_form = $submit_view;
		
		$this->template->content = $content;
	}


/*
 * get the reviews data depending on how we are asking for it.
 */
	
	private function reviews_list()
	{
			# get reviews based on parameters:
			
			# defaults
			$format = (isset($_GET['format'])) ? $_GET['format'] : 'normal';
			$field = 'site_id';
			$value = $this->site_id;
			$sort = array('created' => 'desc');
			
			if(isset($_GET['tag']) AND is_numeric($_GET['tag']))
			{
				$field = 'tag_id';
				$value = $_GET['tag'];
			}
			
			if(isset($_GET['sort']))
				switch($_GET['sort'])
				{
					case 'oldest':
						$sort = array('created' => 'asc');
						break;
					case 'highest':
						$sort = array('rating' => 'desc');
						break;
					case 'lowest':
						$sort = array('rating' => 'asc');
						break;
				}	
			
			# pagination.
			if(isset($_GET['page']))
			{
			
			}
	
			$reviews = ORM::factory('review')
			->where($field, $value)
			->orderby($sort)
			->find_all();
			

			# return JSON?
			if('json' == $format)
			{
				$review_array = array();
				foreach($reviews as $review)
				{
					$review_array[] = $review->as_array();
				}
				#echo kohana::debug($review_array);
				$json = json_encode($review_array);
				#echo kohana::debug($json);
				
				header('Cache-Control: no-cache, must-revalidate');
				header('Expires: Mon, 26 Jul 1997 05:00:00 GMT');
				header('Content-type: text/plain');
				#header('Content-type: application/json');
				die("pandaGetRev($json)");
			}
			

			# send as view.
			$view = new View('reviews_list');
			$view->reviews = $reviews;		
			return $view;
	}
	
/*
 * post review handler.
 * validates and adds the new review to the site.
 */
	private function submit_handler()
	{
		# validate the form values.
		$post = new Validation($_POST);
		$post->pre_filter('trim');
		$post->add_rules('body', 'required');
		$post->add_rules('display_name', 'required');
		$post->add_rules('email', 'required');
		
		# on error
		if(!$post->validate())
		{
			$view = new View('submit_review_form');
			$view->errors = $post->errors();
			$view->values = $_POST;
			
			# try to get rid of this ..
			$site = ORM::factory('site', $this->site_id);
			$view->site = $site;
			return $view;
		}
		
		# on valid submission:
		
		# load user
		$user = ORM::factory('user');
		
		# if user does not exist, create him.
		if(!$user->email_exists($_POST['email']))
		{
			$user->email = $_POST['email'];
			$user->display_name = $_POST['display_name'];
			$user->save();
		}
		
		# add review
		$new_review = ORM::factory('review');
		$new_review->site_id	= $this->site_id;
		$new_review->tag_id		= $_POST['tag'];
		$new_review->user_id	= $user->id;
		$new_review->body			= $_POST['body'];
		$new_review->rating		= $_POST['rating'];
		$new_review->save();

		# return status
		$view = new View('submit_status');
		$view->success = true;
		return $view;
	}


/*
 * ajax handler
 */ 	
	public function _ajax()
	{		
		#$get = $_GET['get'];
		
		if($_POST)
			die(self::submit_handler());
		else
			die(self::reviews_list());
			
		die('invalid data');
	}	
	
	
	
	
	
	public function __call($method, $arguments)
	{
		// Disable auto-rendering
		$this->auto_render = FALSE;

		// By defining a __call method, all pages routed to this controller
		// that result in 404 errors will be handled by this method, instead of
		// being displayed as "Page Not Found" errors.
		echo 'This text is generated by __call. If you expected the index page, you need to use: welcome/index/'.substr(Router::$current_uri, 8);
	}

} // End home Controller